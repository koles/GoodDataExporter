= GoodData Exporter

== Usage

The tool reads from a source GoodData project and modify a target GoodData project. It can do many tricks depending on
the command given. See the commands supported today below.

<tt>gdci [options] command</tt>

=== Commands

*show-multiple-labels* - lists all attributes with multiple labels

*export* - exports specified identifiers (e.g. export ['adyD7xEmdhTx', 'agEEuYDOefRs', 'anANdK89eBKU'])

*import* - imports specified identifiers (e.g. export ['adyD7xEmdhTx', 'agEEuYDOefRs', 'anANdK89eBKU'])

*drop* - drops specified identifiers (e.g. drop ['adyD7xEmdhTx', 'agEEuYDOefRs', 'anANdK89eBKU'])

*drop-all* metrics | reports | projectDashboards - drops all instances of a specific object type

=== Options

<b>--help, -h</b> - Shows help.

<b>--dir [output-directory], -d [output-directory]</b> - Directory where the export/import stores/retrieves metadata objects.

<b>--username [gooddata-username], -u [gooddata-username]</b> - Valid GoodData username.

<b>--password [gooddata-password], -u [gooddata-password]</b> - Valid GoodData password.

<b>--source [source-project], -s [source-project]</b> - An existing GoodData project where the metadata objects will be retrieved from.

<b>--target [target-project], -t [target-project]</b> - An existing GoodData project where the metadata objects will be stored.

<b>--overwrite, -o</b> - Import overwrites existing objects. Default is false.

<b>--labels [attribute-primary-labels], -l [attribute-primary-labels]</b> - Ruby hash that identifies the primary label for each attribute that has multiple labels. The primary label must uniquely identify every attribute element. (e.g. {'attr.user.userid'=>'label.user.userid', 'attr.account.id'=>'label.account.id'}

== Options File

The tool accepts the options file named +.gooddata+ placed in the current directory, the script directory or in your home directory (searches for the .gooddata file in this order).
Here is the example +.gooddata+ file:

  {
    "username": "test@gooddata.com",
    "password": "password",
    "dir": "/Users/test/project_md_dir",
    "source": "i4nfph0opsvt66u6b7e4hqnxf0r2w8dx",
    "target": "alobesvmeuze3hhwevp6juokl5ixjr16",
    "labels": {"attr.stage.name":"label.stage.name","attr.opportunity.id":"label.opportunity.id"}
  }

== Most Frequent Scenario

1. Create your +.gooddata+ file in your home directory. Specify the GoodData *username*, *password*, and the *source* project keys.
2. Run the <tt>gdci show-multiple-labels</tt> command. This yields the list of all attributes with multiple labels. Identify the primary label for each attribute (remove all others) and put the resulting JSON into the +.gooddata+ file. Often you can remove all date and time dimensions from the list. Include them only if you have filters that reference specific days, months or years.
3. Create the metadata export directory and reference it in the +.gooddata+ file via the *dir* key.
4. Find out the identifier of the object that you want to export. This is usually a dashboard or report.
5. Run the <tt>gdci export ['identifier']</tt> command to export the object and all its dependencies to the export directory.
6. Identify the target project where you want to import the object and reference it in the +.gooddata+ file via the *target* key.
7. Run the <tt>gdci import ['identifier']</tt> command to export the object and all its dependencies to the export directory.
8. Check the target project for the imported objects.

== Known Limitations

* The *export* command only exports the last report definition for each report. So all historical versions of the report are discarded.
* The *export* command doesn't export Mandatory User Filters  (MUFs) and variable answers (specific variable values for different users). It only exports the variable's default values.
* It still contains some bugs - report them in GitHub[https://github.com/zsvoboda/GoodDataExporter/issues]

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself we can ignore when we pull)
* Send us a pull request. Bonus points for topic branches.

== Credits

This project is developed and maintained by Zdenek Svoboda [ mailto:zd@gooddata.com / {@zsvoboda}[http:/twitter.com/zsvoboda] ]

== Copyright

Copyright (c) 2010 - 2011 GoodData Corporation. See LICENSE for details.